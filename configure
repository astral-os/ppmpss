#!/bin/sh

# vim: ts=8 sw=8 noet cc=80
#
# SPDX-License-Identifier: GPL-3.0-or-later
#
# Portable package manager made in POSIX shell script
# Copyright (C) 2023 astral
# 
# This file is part of ppmpss.
# 
# ppmpss is free software: you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
# 
# ppmpss is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
# details.
# 
# You should have received a copy of the GNU General Public License along with
# ppmpss. If not, see <https://www.gnu.org/licenses/>.

for arg
do
	case $arg in
	--reset)
		rm -f config.mk
		if [ -f Makefile ]
		then
			mv Makefile Makefile.in
		fi
		exit 0
		;;
	--help)
		cat <<- eof
		Configure the build and install system for ppmpss.

		This script will generate a Makefile config and write your
		settings into ppmpss.

		usage:
		$0 [--reset] [--help] [--prefix=<PREFIX>]

		--reset
		    Reset files the way before running configure. The PREFIX
		    written to ppmpss.sh needs to be reset manually as the
		    reset option shouldn't depend on ed
		--help
		    Display this screen
		--prefix=<PREFIX>
		    Configure the build system and ppmpss to use the specified
		    PREFIX for installation.
		eof
		exit 0
		;;
	--prefix=*)
		PREFIX=${arg##*=}
		;;
	*)
		printf >&2 "usage: %s [--reset] [--help] [--prefix=<PREFIX>]\n" "$0"
		exit 1
		;;
	esac
done

# See if system has ed command
printf "%-58s" "Checking for ed command..."
if [ -z "$(command -v ed)" ]
then
	echo
	printf >&2 "ed command not found\n"
	exit 1
fi
printf "OK\n"

# See if ed can edit ppmpss.sh
printf "%-58s" "Checking if available ed is suitable..."
if ! ed -s ppmpss.sh < /dev/null > /dev/null 2>&1
then
	echo
	printf >&2 "ed command not suitable\n"
	exit 1
fi
printf "OK\n"

: "${PREFIX:=/usr/local}"

# Let ppmpss know about configured PREFIX
printf "%-58s" "Writing PREFIX to ppmpss..."
if ! printf '%s\n' '29d' '29i' "PREFIX=$PREFIX" '.' 'w' | ed -s ppmpss.sh
then
	echo
	printf >&2 "Failed to write PREFIX to ppmpss\n"
	exit 1
fi
printf "OK\n"

cat << eof > config.mk
DESTDIR =
PREFIX  = $PREFIX
eof

if [ -f Makefile.in ]
then
	mv Makefile.in Makefile
fi

printf "PREFIX: %s\n" "$PREFIX"

exit 0
